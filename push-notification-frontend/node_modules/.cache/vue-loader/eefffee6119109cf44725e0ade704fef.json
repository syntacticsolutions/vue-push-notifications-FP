{"remainingRequest":"/Users/sisuser/vue-push-notifications-FP/push-notification-frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/sisuser/vue-push-notifications-FP/push-notification-frontend/src/components/PushNotificationSubscriber.vue?vue&type=style&index=0&id=c4e95854&scoped=true&lang=css&","dependencies":[{"path":"/Users/sisuser/vue-push-notifications-FP/push-notification-frontend/src/components/PushNotificationSubscriber.vue","mtime":1544743177015},{"path":"/Users/sisuser/vue-push-notifications-FP/push-notification-frontend/node_modules/css-loader/index.js","mtime":499162500000},{"path":"/Users/sisuser/vue-push-notifications-FP/push-notification-frontend/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/sisuser/vue-push-notifications-FP/push-notification-frontend/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/sisuser/vue-push-notifications-FP/push-notification-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/sisuser/vue-push-notifications-FP/push-notification-frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nh3 {\n  margin: 40px 0 0;\n}\nul {\n  list-style-type: none;\n  padding: 0;\n}\nli {\n  display: inline-block;\n  margin: 0 10px;\n}\na {\n  color: #42b983;\n}\n",{"version":3,"sources":["PushNotificationSubscriber.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0HA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"PushNotificationSubscriber.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"push-notification-subscriber\">\n    <button @click=\"subscribe\">Subscribe</button>\n    <button @click=\"unsubscribe\">Unsubscribe</button>\n  </div>\n</template>\n\n<script>\n\n// import { Button } from 'element-ui'\nimport firebase from 'firebase'\n\nconst fbConfig = {\n  apiKey: \"AIzaSyD2gCifW9ac1hlFpcywTGJTxzOHbLRA_Yw\",\n  authDomain: \"push-notifications-fef03.firebaseapp.com\",\n  databaseURL: \"https://push-notifications-fef03.firebaseio.com\",\n  projectId: \"push-notifications-fef03\",\n  storageBucket: \"push-notifications-fef03.appspot.com\",\n  messagingSenderId: \"230112976648\"\n}\n\nfirebase.initializeApp(fbConfig)\n\nexport default {\n  name: 'PushNotificationSubscriber',\n  // components: {\n  //   \"el-button\": Button\n  // },\n  props: {\n    \n  },\n  data: () => ({\n    messaging: undefined\n  }),\n  methods: {\n    subscribe () {\n      window.messaging\n        .requestPermission()\n        .then(() => {\n          alert('Notification permission granted.');\n          this.getAndSendToken()\n          // TODO(developer): Retrieve an Instance ID token for use with FCM.\n          // ...\n        })\n        .catch(function(err) {\n          alert('Unable to get permission to notify: ' + err);\n        });\n    },\n    getAndSendToken () {\n      window.messaging.getToken().then((currentToken) => {\n        if (currentToken) {\n          window.sendTokenToServer(currentToken);\n        } else {\n          // Show permission request.\n          alert('Push service subscription failed. Please try again later.')\n          this.tokenSent = false\n        }\n      }).catch((err) => {\n        alert('An error occurred while retrieving token. ' + err)\n        this.tokenSent = false\n      });\n    },\n    sendTokenToServer (currentToken) {\n      if (!this.tokenSent) {\n\n        this.$axios\n          .post(this.$config.host + '/api/sendPush', { token: currentToken })\n          .then((res) => {\n            console.log(res)\n            this.tokenSent = true\n          })\n          .catch(() => {\n            this.tokenSent = false\n          })\n      } else {\n        alert('Token already sent to server so won\\'t send it again ' +\n            'unless it changes');\n      }\n    },\n    unsubscribe () {\n        // Delete Instance ID token.\n      window.messaging.getToken().then((currentToken) => {\n        window.messaging.deleteToken(currentToken).then(() => {\n\n          this.tokenSent = false\n        }).catch(function(err) {\n          alert('Unable to delete token. ', err)\n        })\n\n      }).catch(function(err) {\n        alert('Error retrieving Instance ID token. ', err)\n      });\n    }\n  },\n  mounted () {\n    window.sendTokenToServer = this.sendTokenToServer\n\n    if (firebase.messaging.isSupported()) {\n      window.messaging = firebase.messaging()\n      window.messaging.usePublicVapidKey('BEJDus6AkdKJ24XycGZN3kQozuPfRNzXssKLo-FVjKDp9dD8jLcns3ZE1vNEYBwWYUvsajzLVji8FKFq8x5s4c8')\n\n      window.messaging.onTokenRefresh(() => {\n        window.messaging.getToken().then((refreshedToken) => {\n          this.tokenSent = false\n          // Send Instance ID token to app server.\n          window.sendTokenToServer(refreshedToken)\n        }).catch(function(err) {\n          alert('Unable to retrieve refreshed token ', err)\n        });\n      });\n\n      window.messaging.onMessage(function(payload) {\n        console.log('Message received. ', payload);\n        // ...\n      });\n    }\n  }\n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\nh3 {\n  margin: 40px 0 0;\n}\nul {\n  list-style-type: none;\n  padding: 0;\n}\nli {\n  display: inline-block;\n  margin: 0 10px;\n}\na {\n  color: #42b983;\n}\n</style>\n"]}]}