{"remainingRequest":"/Users/sisuser/vue-push-notifications-FP/push-notification-frontend/node_modules/babel-loader/lib/index.js!/Users/sisuser/vue-push-notifications-FP/push-notification-frontend/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/sisuser/vue-push-notifications-FP/push-notification-frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/sisuser/vue-push-notifications-FP/push-notification-frontend/src/components/PushNotificationSubscriber.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/sisuser/vue-push-notifications-FP/push-notification-frontend/src/components/PushNotificationSubscriber.vue","mtime":1544735070844},{"path":"/Users/sisuser/vue-push-notifications-FP/push-notification-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/sisuser/vue-push-notifications-FP/push-notification-frontend/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/sisuser/vue-push-notifications-FP/push-notification-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/sisuser/vue-push-notifications-FP/push-notification-frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n// import { Button } from 'element-ui'\nimport firebase from 'firebase';\nvar fbConfig = {\n  apiKey: \"AIzaSyD2gCifW9ac1hlFpcywTGJTxzOHbLRA_Yw\",\n  authDomain: \"push-notifications-fef03.firebaseapp.com\",\n  databaseURL: \"https://push-notifications-fef03.firebaseio.com\",\n  projectId: \"push-notifications-fef03\",\n  storageBucket: \"push-notifications-fef03.appspot.com\",\n  messagingSenderId: \"230112976648\"\n};\nfirebase.initializeApp(fbConfig);\nexport default {\n  name: 'PushNotificationSubscriber',\n  // components: {\n  //   \"el-button\": Button\n  // },\n  props: {},\n  data: function data() {\n    return {\n      messaging: undefined\n    };\n  },\n  methods: {\n    subscribe: function subscribe() {\n      this.messaging.requestPermission().then(function () {\n        alert('Notification permission granted.');\n        this.getAndSendToken(); // TODO(developer): Retrieve an Instance ID token for use with FCM.\n        // ...\n      }).catch(function (err) {\n        alert('Unable to get permission to notify.', err);\n      });\n    },\n    getAndSendToken: function getAndSendToken() {\n      this.messaging.getToken().then(function (currentToken) {\n        if (currentToken) {\n          this.sendTokenToServer(currentToken);\n        } else {\n          // Show permission request.\n          alert('Push service subscription failed. Please try again later.');\n          this.tokenSent = false;\n        }\n      }).catch(function (err) {\n        alert('An error occurred while retrieving token. ', err);\n        this.tokenSent = false;\n      });\n    },\n    sendTokenToServer: function sendTokenToServer(currentToken) {\n      var _this = this;\n\n      if (!this.tokenSent) {\n        this.$axios.post(this.$config.host + '/api/sendPush', {\n          token: currentToken\n        }).then(function () {\n          _this.tokenSent = true;\n        }).catch(function () {\n          _this.tokenSent = false;\n        });\n      } else {\n        alert('Token already sent to server so won\\'t send it again ' + 'unless it changes');\n      }\n    },\n    unsubscribe: function unsubscribe() {\n      // Delete Instance ID token.\n      this.messaging.getToken().then(function (currentToken) {\n        this.messaging.deleteToken(currentToken).then(function () {\n          this.tokenSent = false;\n        }).catch(function (err) {\n          alert('Unable to delete token. ', err);\n        });\n      }).catch(function (err) {\n        alert('Error retrieving Instance ID token. ', err);\n      });\n    }\n  },\n  mounted: function mounted() {\n    if (firebase.messaging.isSupported()) {\n      this.messaging = firebase.messaging();\n      this.messaging.usePublicVapidKey('BClln4-5tyIfJV2a80sfTsRiqpg1C71gLqfcBUrgswcQOmRANOzGWtM4TYIA9DWP2HOqjn5XUvPrTzbNBfSAcd4');\n      this.messaging.onTokenRefresh(function () {\n        this.messaging.getToken().then(function (refreshedToken) {\n          this.tokenSent = false; // Send Instance ID token to app server.\n\n          this.sendTokenToServer(refreshedToken);\n        }).catch(function (err) {\n          alert('Unable to retrieve refreshed token ', err);\n        });\n      });\n    }\n  }\n};",{"version":3,"sources":["PushNotificationSubscriber.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"push-notification-subscriber\">\n    <button @click=\"subscribe\">Subscribe</button>\n    <button @click=\"unsubscribe\">Unsubscribe</button>\n  </div>\n</template>\n\n<script>\n\n// import { Button } from 'element-ui'\nimport firebase from 'firebase'\n\nconst fbConfig = {\n  apiKey: \"AIzaSyD2gCifW9ac1hlFpcywTGJTxzOHbLRA_Yw\",\n  authDomain: \"push-notifications-fef03.firebaseapp.com\",\n  databaseURL: \"https://push-notifications-fef03.firebaseio.com\",\n  projectId: \"push-notifications-fef03\",\n  storageBucket: \"push-notifications-fef03.appspot.com\",\n  messagingSenderId: \"230112976648\"\n}\n\nfirebase.initializeApp(fbConfig)\n\nexport default {\n  name: 'PushNotificationSubscriber',\n  // components: {\n  //   \"el-button\": Button\n  // },\n  props: {\n    \n  },\n  data: () => ({\n    messaging: undefined\n  }),\n  methods: {\n    subscribe () {\n      this.messaging\n        .requestPermission()\n        .then(function() {\n          alert('Notification permission granted.');\n          this.getAndSendToken()\n          // TODO(developer): Retrieve an Instance ID token for use with FCM.\n          // ...\n        })\n        .catch(function(err) {\n          alert('Unable to get permission to notify.', err);\n        });\n    },\n    getAndSendToken () {\n      this.messaging.getToken().then(function(currentToken) {\n        if (currentToken) {\n          this.sendTokenToServer(currentToken);\n        } else {\n          // Show permission request.\n          alert('Push service subscription failed. Please try again later.')\n          this.tokenSent = false\n        }\n      }).catch(function(err) {\n        alert('An error occurred while retrieving token. ', err)\n        this.tokenSent = false\n      });\n    },\n    sendTokenToServer (currentToken) {\n      if (!this.tokenSent) {\n\n        this.$axios\n          .post(this.$config.host + '/api/sendPush', { token: currentToken })\n          .then(() => {\n            this.tokenSent = true\n          })\n          .catch(() => {\n            this.tokenSent = false\n          })\n      } else {\n        alert('Token already sent to server so won\\'t send it again ' +\n            'unless it changes');\n      }\n    },\n    unsubscribe () {\n        // Delete Instance ID token.\n      this.messaging.getToken().then(function(currentToken) {\n        this.messaging.deleteToken(currentToken).then(function() {\n\n          this.tokenSent = false\n        }).catch(function(err) {\n          alert('Unable to delete token. ', err)\n        })\n\n      }).catch(function(err) {\n        alert('Error retrieving Instance ID token. ', err)\n      });\n    }\n  },\n  mounted () {\n    if (firebase.messaging.isSupported()) {\n      this.messaging = firebase.messaging()\n      this.messaging.usePublicVapidKey('BClln4-5tyIfJV2a80sfTsRiqpg1C71gLqfcBUrgswcQOmRANOzGWtM4TYIA9DWP2HOqjn5XUvPrTzbNBfSAcd4')\n\n      this.messaging.onTokenRefresh(function() {\n        this.messaging.getToken().then(function(refreshedToken) {\n          this.tokenSent = false\n          // Send Instance ID token to app server.\n          this.sendTokenToServer(refreshedToken)\n        }).catch(function(err) {\n          alert('Unable to retrieve refreshed token ', err)\n        });\n      });\n    }\n  }\n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\nh3 {\n  margin: 40px 0 0;\n}\nul {\n  list-style-type: none;\n  padding: 0;\n}\nli {\n  display: inline-block;\n  margin: 0 10px;\n}\na {\n  color: #42b983;\n}\n</style>\n"],"sourceRoot":"src/components"}]}